{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project\\\\Web\\\\Github\\\\manage-event\\\\frontend\\\\src\\\\page\\\\EventDetailPage.jsx\",\n  _s = $RefreshSig$();\nimport { Link, json, useRouteLoaderData, useParams, redirect, defer } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.id;\n  return defer({\n    event: await loadEvent(id),\n    events: loadEvents()\n  });\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.id;\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete the event\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // throw new Response(JSON.stringify({ message: \"could not fetched the data\" }), { status: 500 });\n    throw json({\n      message: \"could not fetched the data\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  return resData.events;\n}\nasync function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch the data for this event detail\"\n    }, {\n      status: 500\n    });\n  }\n  const resData = await response.json();\n  return resData.event;\n}\nexport default function EventDetailPage() {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: \"()\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventItem, {\n      event: event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"..\",\n      relative: \"path\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Back \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Link","json","useRouteLoaderData","useParams","redirect","defer","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","loader","request","params","id","event","loadEvent","events","loadEvents","action","eventId","response","fetch","method","ok","message","status","resData","EventDetailPage","_s","children","Suspense","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Await","resolve","to","relative","_c","$RefreshReg$"],"sources":["D:/Project/Web/Github/manage-event/frontend/src/page/EventDetailPage.jsx"],"sourcesContent":["import { Link, json, useRouteLoaderData, useParams, redirect, defer } from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nexport async function loader({ request, params }) {\r\n  const id = params.id;\r\n  return defer({\r\n    event: await loadEvent(id),\r\n    events: loadEvents(),\r\n  });\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.id;\r\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, { method: request.method });\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: \"Could not delete the event\" }, { status: 500 });\r\n  }\r\n\r\n  return redirect(\"/events\");\r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // throw new Response(JSON.stringify({ message: \"could not fetched the data\" }), { status: 500 });\r\n    throw json({ message: \"could not fetched the data\" }, { status: 500 });\r\n  }\r\n\r\n  const resData = await response.json();\r\n\r\n  return resData.events;\r\n}\r\n\r\nasync function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw json({ message: \"Could not fetch the data for this event detail\" }, { status: 500 });\r\n  }\r\n  const resData = await response.json();\r\n\r\n  return resData.event;\r\n}\r\n\r\nexport default function EventDetailPage() {\r\n  const { event, events } = useRouteLoaderData(\"event-detail\");\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading...</p>}>\r\n        <Await resolve={event}>\r\n          ()\r\n        </Await>\r\n      </Suspense>\r\n      <EventItem event={event} />\r\n\r\n      <Link to=\"..\" relative=\"path\">\r\n        <button>Back </button>\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,IAAI,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,kBAAkB;AAC7F,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhD,OAAO,eAAeC,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMC,EAAE,GAAGD,MAAM,CAACC,EAAE;EACpB,OAAOT,KAAK,CAAC;IACXU,KAAK,EAAE,MAAMC,SAAS,CAACF,EAAE,CAAC;IAC1BG,MAAM,EAAEC,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeC,MAAMA,CAAC;EAAEN,MAAM;EAAED;AAAQ,CAAC,EAAE;EAChD,MAAMQ,OAAO,GAAGP,MAAM,CAACC,EAAE;EACzB,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,OAAO,EAAE;IAAEG,MAAM,EAAEX,OAAO,CAACW;EAAO,CAAC,CAAC;EAEnG,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMvB,IAAI,CAAC;MAAEwB,OAAO,EAAE;IAA6B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACxE;EAEA,OAAOtB,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAEA,eAAec,UAAUA,CAAA,EAAG;EAC1B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACG,EAAE,EAAE;IAChB;IACA,MAAMvB,IAAI,CAAC;MAAEwB,OAAO,EAAE;IAA6B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACxE;EAEA,MAAMC,OAAO,GAAG,MAAMN,QAAQ,CAACpB,IAAI,CAAC,CAAC;EAErC,OAAO0B,OAAO,CAACV,MAAM;AACvB;AAEA,eAAeD,SAASA,CAACF,EAAE,EAAE;EAC3B,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGR,EAAE,CAAC;EAElE,IAAI,CAACO,QAAQ,CAACG,EAAE,EAAE;IAChB,MAAMvB,IAAI,CAAC;MAAEwB,OAAO,EAAE;IAAiD,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC5F;EACA,MAAMC,OAAO,GAAG,MAAMN,QAAQ,CAACpB,IAAI,CAAC,CAAC;EAErC,OAAO0B,OAAO,CAACZ,KAAK;AACtB;AAEA,eAAe,SAASa,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACxC,MAAM;IAAEd,KAAK;IAAEE;EAAO,CAAC,GAAGf,kBAAkB,CAAC,cAAc,CAAC;EAE5D,oBACEM,OAAA,CAAAE,SAAA;IAAAoB,QAAA,gBACEtB,OAAA,CAACuB,QAAQ;MAACC,QAAQ,eAAExB,OAAA;QAAGyB,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAJ,QAAA,EAAC;MAAU;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAR,QAAA,eACpEtB,OAAA,CAAC+B,KAAK;QAACC,OAAO,EAAEzB,KAAM;QAAAe,QAAA,EAAC;MAEvB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACX9B,OAAA,CAACF,SAAS;MAACS,KAAK,EAAEA;IAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE3B9B,OAAA,CAACR,IAAI;MAACyC,EAAE,EAAC,IAAI;MAACC,QAAQ,EAAC,MAAM;MAAAZ,QAAA,eAC3BtB,OAAA;QAAAsB,QAAA,EAAQ;MAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA,eACP,CAAC;AAEP;AAACT,EAAA,CAjBuBD,eAAe;EAAA,QACX1B,kBAAkB;AAAA;AAAAyC,EAAA,GADtBf,eAAe;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}